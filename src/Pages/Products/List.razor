@page "/products"

@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using Data.Models

@inject IJSRuntime js
@inject Microsoft.AspNetCore.Components.NavigationManager navManager
@inject IDbContextFactory<Data.ApplicationDbContext> dbFactory

<MudText class="Typo.h3">Products</MudText>
<MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Define products list</MudText>
<MudDivider Class="my-2"/>

<MudButton OnClick="@(() => CreateNew())">Create new</MudButton>
<br>
@if (products == null)
{
	<text>Loading...</text>
}
else if (products.Count == 0)
{
	<text>No Records Found.</text>
}
else
{
	<MudTable Items="@products" Dense="true" Striped="true">
		<HeaderContent>
			<MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x=>x.ProductId)">Id</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
			<MudTh>Description</MudTh>
			<MudTh>Command</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Id">@context.ProductId</MudTd>
			<MudTd DataLabel="Name">@context.Name</MudTd>
			<MudTd DataLabel="Description">@context.Description</MudTd>
			<MudTd>
				<MudToolBar Dense="true">
					<MudButton Color="Color.Inherit" OnClick="@(() => Edit(@context.ProductId))">Edit</MudButton>
					<MudButton Color="Color.Inherit" OnClick="@(() => Delete(@context.ProductId))">Delete</MudButton>
				</MudToolBar>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[]{50, 100}" />
		</PagerContent>
	</MudTable>
}
@code {
	IList<Product> products { get; set; }

	protected override async Task OnInitializedAsync()
	{
		using var db = dbFactory.CreateDbContext();
		products = await db.Products.ToListAsync();
	}

	async Task Delete(int productId)
	{
		using var db = dbFactory.CreateDbContext();
		var product = products.First(x => x.ProductId == productId);
		if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {product.Name}'s ({product.ProductId}) Record?"))
		{
			db.Remove(product);
			await db.SaveChangesAsync();
			await OnInitializedAsync();
		}
	}
	void Edit(int productId)
	{
		navManager.NavigateTo($"products/edit/{productId}");
	}
	void CreateNew()
	{
		navManager.NavigateTo($"products/create");
	}
}
