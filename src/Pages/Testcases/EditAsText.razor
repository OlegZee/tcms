@page "/testcases/editastext/{productId:int}"

@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using Markdig
@using Data.Models
@using System.Text
@using tcms.Domain

@inject NavigationManager uriHelper
@inject IDbContextFactory<Data.ApplicationDbContext> dbFactory
@inject IJSRuntime js

@attribute [Authorize(Policy = Constants.Permissions.TestCases.Edit)]

<h3>Edit test cases</h3>
<MudGrid>
    <MudItem xs="6">
        <MudTextField T="string" Variant="Variant.Filled"
			@bind-Value="@wikiText"
			DebounceInterval="900"
			Lines="40" Margin="Margin.Dense" />
    </MudItem>
    <MudItem xs="6">
		<div style="height:56em;overflow: auto;">
			@((MarkupString)renderedWiki)
		</div>
    </MudItem>

	<MudCard>
		<MudCardActions>
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick=@OnValidate>Validate</MudButton>
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick=@OnSave>Save</MudButton>
			<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick=@Back>Back</MudButton>
		</MudCardActions>
	</MudCard>
</MudGrid>

@code {

	public string itemIdsStr {get; set; }

	string wikiText = "";
	string renderedWiki => Markdig.Markdown.ToHtml(wikiText);

	Product product;
	List<TestCaseType> caseTypes = new ();
	List<TestCasePriority> casePriorities = new ();

	[Parameter]
	public int productId {get; set;}

	protected override async Task OnInitializedAsync()
	{
		using var db = dbFactory.CreateDbContext();
		caseTypes = await db.TestCaseTypes.ToListAsync();
		casePriorities = await db.TestCasePriorities.ToListAsync();
	}

	protected override async Task OnParametersSetAsync()
	{
		using var db = dbFactory.CreateDbContext();
		product = await db.Products.Where(p => p.ProductId == productId).Include(p => p.Components).FirstAsync();

		var uri = uriHelper.ToAbsoluteUri(uriHelper.Uri);
		if(!QueryHelpers.ParseQuery(uri.Query).TryGetValue("Items", out var itemIdsStr))
		{
			Console.WriteLine("Items are not passed");
		}
		var itemIds = (
			from str in itemIdsStr
			from id in str.Split(',')
			select int.Parse(id)
		).ToList();
		var itemIdsDict = itemIds.Select((id, idx) => new {id, idx}).ToDictionary(i => i.id, i => i.idx);

		var wikiBuilder = new StringBuilder();
		wikiBuilder.AppendLine($"# {product.Name}");

		string lastComponentName = null;
		foreach(var tc in from testcase in db.TestCases
			where itemIds.Contains(testcase.TestCaseId)
			@* TODO orderby itemIdsDict[testcase.TestCaseId] *@
			select testcase)
		{
			var component = product.Components.First(c => c.ComponentId == tc.ComponentId);
			if(component != null && component.Name != lastComponentName)
			{
				wikiBuilder.AppendLine($"## {component.Name}");
				lastComponentName = component.Name;
			}
			wikiBuilder.AppendLine();
			// TODO fix title (add testcase marker and id)
			wikiBuilder.AppendLine($"### TestCase: {tc.Title} {{id={tc.TestCaseId}}}");
			if(!string.IsNullOrEmpty(tc.Text))
			{
				wikiBuilder.AppendLine(tc.Text);
				wikiBuilder.AppendLine();
			}
			// TODO add attributes
		}

		wikiText = wikiBuilder.ToString();

		await base.OnParametersSetAsync();
	}

	string MakeNewTestCase()
	{
		var defaultComponent = product.Components.OrderBy(c => c.ComponentId).First();
		return $@"# {defaultComponent.Name}
## TestCase: test case title
This scenario verifies proper initialization of the designer web component....

@type: Functional  
@priority: High  
@estimateHr: 0  
 
### Repro steps
1. step 1
1. step 2
";
	}
	

	void OnValidate()
	{
		var validationResult = Validate(wikiText);

		validationResult.Errors.ForEach(e => _snackBar.Add(e, Severity.Error));
		validationResult.Warnings.ForEach(w => _snackBar.Add(w, Severity.Warning));

		if(validationResult.Errors.Count > 0)
		{
			return;
		}
		_snackBar.Add($"{validationResult.TestCases.Count} test cases were found", Severity.Info);
	}

	class ValidationResult
	{
		public List<TestCase> TestCases { get; } = new List<TestCase>();
		public List<string> Errors { get; } = new List<string>();
		public List<string> Warnings { get; } = new List<string>();
	}

	ValidationResult Validate(string wiki)
	{
		var result = new ValidationResult();

		var parseResult = TestCaseWikiParser.Parse(wiki);
		if(parseResult.Count == 0)
		{
			result.Errors.Add("No testcase declaration found");
			return result;
		}
		bool eqstr(string s1, string s2) => StringComparer.InvariantCultureIgnoreCase.Equals(s1, s2);

		foreach(var tc in parseResult)
		{
			var component = product.Components.FirstOrDefault(c => eqstr(c.Name, tc.ComponentPath));
			if (component == null)
			{
				result.Errors.Add($"Failed to find component '{tc.ComponentPath}'");
				continue;
			}
			var typeId = caseTypes.FirstOrDefault(t => eqstr(t.Name, tc.Type))?.TestCaseTypeId;
			var priorityId = casePriorities.FirstOrDefault(t => eqstr(t.Name, tc.Priority))?.TestCasePriorityId;

			if(!typeId.HasValue)
			{
				result.Warnings.Add($"Failed to find type '{tc.Type}', using \"other\"");
				typeId = 1; // other
			}
			if(!priorityId.HasValue)
			{
				result.Warnings.Add($"Failed to find priority '{tc.Priority}', using \"normal\"");
				priorityId = 2; // normal
			}

			result.TestCases.Add(new TestCase() {
				Title = tc.Title,
				Description = "",
				Text = tc.Text,
				ComponentId = component.ComponentId,
				StatusId = 1,	// Proposed
				EstimateHr = tc.EstimateHr ?? 0.0,
				TypeId = typeId.Value,
				PriorityId = priorityId.Value,
			});
		}
		return result;
	}

	async Task OnSave()
	{
		var validationResult = Validate(wikiText);
		if (validationResult.Errors.Count > 0)
		{
			validationResult.Errors.ForEach(e => _snackBar.Add(e, Severity.Error));
			validationResult.Warnings.ForEach(w => _snackBar.Add(w, Severity.Warning));
			return;
		}

		validationResult.Warnings.ForEach(w => _snackBar.Add(w, Severity.Warning));

		try
		{
			using var db = dbFactory.CreateDbContext();

			db.AddRange(validationResult.TestCases);
			await db.SaveChangesAsync();
			_snackBar.Add($"{validationResult.TestCases.Count} test cases were created successfully", Severity.Success);
			uriHelper.NavigateTo("testcases");
		}
		catch(DbUpdateException updError)
		{
			_snackBar.Add($"Failed to create testcase: {updError.InnerException.Message}", Severity.Error);
		}
		catch(Exception error)
		{
			_snackBar.Add($"Fatal error: {error.InnerException.Message}", Severity.Error);
		}

	}

	async Task Back() {
		await js.InvokeVoidAsync("history.back");
	}

}