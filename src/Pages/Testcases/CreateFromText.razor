@page "/testcases/createfromtext"

@using Microsoft.EntityFrameworkCore
@using Markdig
@using Data.Models
@using tcms.Domain

@inject NavigationManager uriHelper
@inject IDbContextFactory<Data.ApplicationDbContext> dbFactory
@inject IJSRuntime js

@attribute [Authorize(Policy = Constants.Permissions.TestCases.Edit)]

<h3>Create</h3>
<MudGrid>
	<MudItem xs="7">
		<MudSelect T="int" @bind-Value="@productId" Label="Product" Variant="Variant.Text">
			@foreach (var p in products) { <MudSelectItem Value="@p.ProductId">@p.Name</MudSelectItem> }
		</MudSelect>
	</MudItem>

    <MudItem xs="6">
        <MudTextField T="string" Variant="Variant.Filled"
			@bind-Value="@wikiText"
			DebounceInterval="900"
			Lines="40" Margin="Margin.Dense" />
    </MudItem>
    <MudItem xs="6">
		<div style="height:56em;overflow: auto;">
			@((MarkupString)renderedWiki)
		</div>
    </MudItem>

	<MudCard>
		<MudCardActions>
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick=@OnValidate>Validate</MudButton>
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick=@OnCreate>Create</MudButton>
			<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick=@Back>Back</MudButton>
		</MudCardActions>
	</MudCard>
</MudGrid>

@code {

	string wikiText = "";
	string renderedWiki => Markdig.Markdown.ToHtml(wikiText, GetPipeline());

	List<Product> products = new ();
	List<TestCaseType> caseTypes = new ();
	List<TestCasePriority> casePriorities = new ();

	int productId;

	public MarkdownPipeline GetPipeline()
	{
		var builder = new MarkdownPipelineBuilder();
		builder.UseAbbreviations()
			.UseAutoIdentifiers()
			.UseCitations()
			.UseCustomContainers()
			.UseDefinitionLists()
			.UseEmphasisExtras()
			.UseFigures()
			.UseFooters()
			.UseFootnotes()
			.UseGridTables()
			@* .UseMediaLinks(mediaOptions) *@
			.UsePipeTables()
			.UseListExtras()
			.UseTaskLists()
			.UseAutoLinks()
			.UseSmartyPants()
			.UseEmojiAndSmiley();
		// .UseBootstrap()

		builder.UseGenericAttributes(); // Must be last as it is one parser that is modifying other parsers
		return builder.Build();
	}

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("********************** OnInitializedAsync");

		using var db = dbFactory.CreateDbContext();
		products = await db.Products.Include(p => p.Components).ToListAsync();
		caseTypes = await db.TestCaseTypes.ToListAsync();
		casePriorities = await db.TestCasePriorities.ToListAsync();

		var product = products.OrderBy(p => p.ProductId).First();
		productId = product.ProductId;

		// TODO choose default one
		var defaultComponent = product.Components.OrderBy(c => c.ComponentId).First();
		wikiText = $@"# {defaultComponent.Name}
## TestCase: test case title
This scenario verifies proper initialization of the designer web component....

@type: Functional
@priority: High  
@estimateHr: 0
 
### Repro steps
1. step 1
1. step 2
";
	}

	void OnValidate()
	{
		var validationResult = Validate(wikiText);

		validationResult.Errors.ForEach(e => _snackBar.Add(e, Severity.Error));
		validationResult.Warnings.ForEach(w => _snackBar.Add(w, Severity.Warning));

		if(validationResult.Errors.Count > 0)
		{
			return;
		}
		_snackBar.Add($"{validationResult.TestCases.Count} test cases were found", Severity.Info);
	}

	class ValidationResult
	{
		public List<TestCase> TestCases { get; } = new List<TestCase>();
		public List<string> Errors { get; } = new List<string>();
		public List<string> Warnings { get; } = new List<string>();
	}

	ValidationResult Validate(string wiki)
	{
		var result = new ValidationResult();

		var parseResult = TestCaseWikiParser.Parse(wiki);
		if(parseResult.Count == 0)
		{
			result.Errors.Add("No testcase declaration found");
			return result;
		}
		var product = products.First(p => p.ProductId == productId);

		bool eqstr(string s1, string s2) => StringComparer.InvariantCultureIgnoreCase.Equals(s1, s2);

		foreach(var tc in parseResult)
		{
			var component = product.Components.FirstOrDefault(c => eqstr(c.Name, tc.ComponentPath));
			if (component == null)
			{
				result.Errors.Add($"Failed to find component '{tc.ComponentPath}'");
				continue;
			}
			var typeId = caseTypes.FirstOrDefault(t => eqstr(t.Name, tc.Type))?.TestCaseTypeId;
			var priorityId = casePriorities.FirstOrDefault(t => eqstr(t.Name, tc.Priority))?.TestCasePriorityId;

			if(!typeId.HasValue)
			{
				result.Warnings.Add($"Failed to find type '{tc.Type}', using \"other\"");
				typeId = 1; // other
			}
			if(!priorityId.HasValue)
			{
				result.Warnings.Add($"Failed to find priority '{tc.Priority}', using \"normal\"");
				priorityId = 2; // normal
			}

			result.TestCases.Add(new TestCase() {
				Title = tc.Title,
				Description = "",
				Text = tc.Text,
				ComponentId = component.ComponentId,
				StatusId = 1,	// Proposed
				EstimateHr = tc.EstimateHr ?? 0.0,
				TypeId = typeId.Value,
				PriorityId = priorityId.Value,
			});
		}
		return result;
	}

	async Task OnCreate()
	{
		var validationResult = Validate(wikiText);
		if (validationResult.Errors.Count > 0)
		{
			validationResult.Errors.ForEach(e => _snackBar.Add(e, Severity.Error));
			validationResult.Warnings.ForEach(w => _snackBar.Add(w, Severity.Warning));
			return;
		}

		validationResult.Warnings.ForEach(w => _snackBar.Add(w, Severity.Warning));

		try
		{
			using var db = dbFactory.CreateDbContext();

			db.AddRange(validationResult.TestCases);
			await db.SaveChangesAsync();
			_snackBar.Add($"{validationResult.TestCases.Count} test cases were created successfully", Severity.Success);
			uriHelper.NavigateTo("testcases");
		}
		catch(DbUpdateException updError)
		{
			_snackBar.Add($"Failed to create testcase: {updError.InnerException.Message}", Severity.Error);
		}
		catch(Exception error)
		{
			_snackBar.Add($"Fatal error: {error.InnerException.Message}", Severity.Error);
		}

	}

	async Task Back() {
		await js.InvokeVoidAsync("history.back");
	}

}