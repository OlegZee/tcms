@page "/products"

@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using Data.Models

@inject IJSRuntime js

@inject Microsoft.AspNetCore.Components.NavigationManager navManager
@inject IDbContextFactory<Data.ApplicationDbContext> dbFactory

@* @attribute [Authorize(Policy = Constants.Permissions.TestCases.Edit)] *@

@if (products == null)
{
	<text>Loading...</text>
}
else if (products.Count == 0)
{
	<text>No products found.</text>
	<br>
    <MudNavLink Href="/manage/products" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">Manage products</MudNavLink>
}
else
{
	<MudTable Items="@products" Striped="true">
		<HeaderContent>
			<MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x=>x.ProductId)" InitialDirection="SortDirection.Ascending">Id</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x=>x.Name)">Title</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x=>x.Description)">Description</MudTableSortLabel></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Id">@context.ProductId</MudTd>
			<MudTd DataLabel="Title">
                <MudNavLink Href=@($"products/{context.ProductId}/testcases") Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">@context.Name</MudNavLink>
                </MudTd>
			<MudTd DataLabel="Title">@context.Description</MudTd>
		</RowTemplate>
	</MudTable>
}

@code {
	IList<Product> products { get; set; }

	protected override async Task OnInitializedAsync()
	{
		using var db = dbFactory.CreateDbContext();
		products = await db.Products.ToListAsync();
	}

	void Edit(int productId)
	{
		navManager.NavigateTo($"testcases/edit/{productId}");
	}

}
